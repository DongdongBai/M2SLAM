// Generated by gencpp from file orbslam_server/orbslam_pose_saveRequest.msg
// DO NOT EDIT!


#ifndef ORBSLAM_SERVER_MESSAGE_ORBSLAM_POSE_SAVEREQUEST_H
#define ORBSLAM_SERVER_MESSAGE_ORBSLAM_POSE_SAVEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace orbslam_server
{
template <class ContainerAllocator>
struct orbslam_pose_saveRequest_
{
  typedef orbslam_pose_saveRequest_<ContainerAllocator> Type;

  orbslam_pose_saveRequest_()
    : ID(0)
    , POSE()  {
    }
  orbslam_pose_saveRequest_(const ContainerAllocator& _alloc)
    : ID(0)
    , POSE(_alloc)  {
  (void)_alloc;
    }



   typedef uint64_t _ID_type;
  _ID_type ID;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _POSE_type;
  _POSE_type POSE;




  typedef boost::shared_ptr< ::orbslam_server::orbslam_pose_saveRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::orbslam_server::orbslam_pose_saveRequest_<ContainerAllocator> const> ConstPtr;

}; // struct orbslam_pose_saveRequest_

typedef ::orbslam_server::orbslam_pose_saveRequest_<std::allocator<void> > orbslam_pose_saveRequest;

typedef boost::shared_ptr< ::orbslam_server::orbslam_pose_saveRequest > orbslam_pose_saveRequestPtr;
typedef boost::shared_ptr< ::orbslam_server::orbslam_pose_saveRequest const> orbslam_pose_saveRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::orbslam_server::orbslam_pose_saveRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::orbslam_server::orbslam_pose_saveRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace orbslam_server

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::orbslam_server::orbslam_pose_saveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::orbslam_server::orbslam_pose_saveRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::orbslam_server::orbslam_pose_saveRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::orbslam_server::orbslam_pose_saveRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::orbslam_server::orbslam_pose_saveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::orbslam_server::orbslam_pose_saveRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::orbslam_server::orbslam_pose_saveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a42a77ce6d70ecf9fbb66477ee7bc5d8";
  }

  static const char* value(const ::orbslam_server::orbslam_pose_saveRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa42a77ce6d70ecf9ULL;
  static const uint64_t static_value2 = 0xfbb66477ee7bc5d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::orbslam_server::orbslam_pose_saveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "orbslam_server/orbslam_pose_saveRequest";
  }

  static const char* value(const ::orbslam_server::orbslam_pose_saveRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::orbslam_server::orbslam_pose_saveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 ID\n\
string POSE\n\
";
  }

  static const char* value(const ::orbslam_server::orbslam_pose_saveRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::orbslam_server::orbslam_pose_saveRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.POSE);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct orbslam_pose_saveRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::orbslam_server::orbslam_pose_saveRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::orbslam_server::orbslam_pose_saveRequest_<ContainerAllocator>& v)
  {
    s << indent << "ID: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.ID);
    s << indent << "POSE: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.POSE);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ORBSLAM_SERVER_MESSAGE_ORBSLAM_POSE_SAVEREQUEST_H
